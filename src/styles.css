import React, { useState, useRef } from 'react';
import './styles.css';

interface FileData {
  name: string;
  content: string;
}

const App: React.FC = () => {
  const [fileData, setFileData] = useState<FileData | null>(null);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      const content = event.target?.result as string;
      setFileData({ name: file.name, content });
    };
    reader.readAsText(file);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const file = e.dataTransfer.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      const content = event.target?.result as string;
      setFileData({ name: file.name, content });
    };
    reader.readAsText(file);
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleIngest = () => {
    if (!fileData) return;
    setIsProcessing(true);

    // Simulate ingestion and summarization
    setTimeout(() => {
      setIsProcessing(false);
      alert(`Processed file: ${fileData.name}`);
    }, 2000);
  };

  return (
    <div className="app-container">
      <h1>Log Summarizer</h1>

      <div
        className="file-drop-zone"
        onDrop={handleDrop}
        onDragOver={handleDragOver}
      >
        <p>Drag & drop a log file here or click to browse</p>
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".json"
          style={{ display: 'none' }}
        />
        <button onClick={() => fileInputRef.current?.click()}>
          Select File
        </button>
      </div>

      {fileData && (
        <div className="file-info">
          <h2>Selected File: {fileData.name}</h2>
          <p>Content preview:</p>
          <pre>{fileData.content.substring(0, 200)}...</pre>
        </div>
      )}

      {fileData && (
        <button
          className="ingest-button"
          onClick={handleIngest}
          disabled={isProcessing}
        >
          {isProcessing ? 'Processing...' : 'Ingest & Summarize'}
        </button>
      )}

      {isProcessing && (
        <div className="progress-bar">
          <div className="progress-fill"></div>
        </div>
      )}
    </div>
  );
.app-container {
  padding: 20px;
  font-family: Arial, sans-serif;
  text-align: center;
}

.file-drop-zone {
  border: 2px dashed #ccc;
  padding: 20px;
  margin: 20px 0;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.ingest-button {
  margin-top: 20px;
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.ingest-button:disabled {
  background-color: #cccccc;
}

.progress-bar {
  width: 100%;
  background-color: #e0e0e0;
  border-radius: 4px;
  margin-top: 20px;
  overflow: hidden;
}

.progress-fill {
  height: 20px;
  background-color: #4CAF50;
  width: 0%;
  transition: width 0.3s ease-in-out;
}
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const handleUpload = () => {
    if (selectedFile) {
      setIsProcessing(true);
      // TODO: Implement ingestion logic here
      setTimeout(() => setIsProcessing(false), 1000);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div
        className="file-drop-zone"
        onDrop={handleDrop}
        onDragOver={(e) => e.preventDefault()}
      >
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".json"
          style={{ display: 'none' }}
        />
        <button onClick={() => fileInputRef.current?.click()}>
          {selectedFile ? selectedFile.name : 'Select or Drop JSON File'}
.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-drop-zone {
  border: 2px dashed #ccc;
  padding: 20px;
  text-align: center;
  margin-top: 20px;
  border-radius: 8px;
  transition: border-color 0.3s ease;
}

.file-drop-zone:hover {
  border-color: #007bff;
}

.file-drop-zone.drag-over {
  border-color: #28a745;
}
            {isProcessing ? 'Processing...' : 'Process File'}
          </button>
        )}
      </div>
    </div>
  );
};

export default App;
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFile(e.dataTransfer.files[0]);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div
        className={`file-drop-area ${isDragging ? 'dragging' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <input
          type="file"
.app {
  text-align: center;
  padding: 20px;
}

.file-drop-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 40px 20px;
  margin: 20px auto;
  width: 300px;
  transition: border-color 0.3s ease;
}

.file-drop-area.dragging {
  border-color: #007bff;
}

.file-input {
  display: none;
}

.file-drop-area p {
  margin: 0;
  color: #666;
}
        />
        <p>Drag & drop a log file here or click to browse</p>
      </div>
      {file && <p>Selected file: {file.name}</p>}
    </div>
  );
};

export default App;
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div
        className={`file-drop-area ${isDragging ? 'dragging' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          className="file-input"
          accept=".json"
        />
        <p>Drag & drop a JSON log file here or click to browse</p>
.app {
  text-align: center;
  padding: 20px;
}

.file-drop-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 20px;
  margin: 20px auto;
  width: 300px;
  transition: border-color 0.3s ease;
}

.file-drop-area.dragging {
  border-color: #007bff;
}

.file-input {
  display: none;
}

.file-info {
  margin-top: 20px;
  font-weight: bold;
}
          <p>Selected file: {selectedFile.name}</p>
        </div>
      )}
    </div>
  );
};

export default App;
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div
        className={`file-drop-area ${isDragging ? 'dragging' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <input
          type="file"
          ref={fileInputRef}
/* Add basic styles for the file picker */
.app {
  padding: 20px;
  text-align: center;
}

.file-drop-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 20px;
  margin: 20px auto;
  width: 300px;
  transition: all 0.3s ease;
}

.file-drop-area.dragging {
  border-color: #007bff;
  background-color: #f0f8ff;
}

.file-input {
  display: none;
}

p {
  margin: 10px 0;
}
        <p>Drag & drop a JSON log file here, or click to browse</p>
        {selectedFile && <p>Selected: {selectedFile.name}</p>}
      </div>
    </div>
  );
};

export default App;
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div
        className={`file-drop-area ${isDragging ? 'dragging' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          className="file-input"
          accept=".json"
        />
.app {
  text-align: center;
  padding: 20px;
}

.file-drop-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 40px;
  margin: 20px auto;
  width: 300px;
  transition: all 0.3s ease;
}

.file-drop-area.dragging {
  border-color: #007bff;
  background-color: #f0f8ff;
}

.file-input {
  display: none;
}

.file-info {
  margin-top: 20px;
  font-weight: bold;
}
        <div className="file-info">
          <p>Selected file: {selectedFile.name}</p>
        </div>
      )}
    </div>
  );
};

export default App;
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const handleUpload = () => {
    if (selectedFile) {
      setIsProcessing(true);
      // TODO: Implement ingestion logic here
      setTimeout(() => setIsProcessing(false), 1000);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div
        className="file-drop-area"
        onDragOver={(e) => e.preventDefault()}
        onDrop={handleDrop}
      >
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          style={{ display: 'none' }}
        />
        <button onClick={() => fileInputRef.current?.click()}>
          {selectedFile ? selectedFile.name : 'Select or Drop File'}
.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 20px;
  text-align: center;
  margin-top: 20px;
  min-height: 100px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.file-drop-area button {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.file-drop-area button:hover {
  background-color: #0056b3;
}

.file-drop-area button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}
          </button>
        )}
      </div>
    </div>
  );
};

export default App;

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  return (
    <div className="app">
/* Add basic styles for file picker */
.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-drop-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 20px;
  text-align: center;
  margin: 20px 0;
  transition: border-color 0.3s ease;
}

.file-drop-area.dragging {
  border-color: #007bff;
}

.file-input {
  display: none;
}
ReactDOM.createRoot(document.getElementById('root')!).render(<App />);
        onDrop={handleDrop}
      >
        <input
          type="file"
          onChange={handleFileChange}
          className="file-input"
        />
        <p>Drag & drop a file here or click to select</p>
      </div>

      {selectedFile && (
        <div>
          <p>Selected file: {selectedFile.name}</p>
        </div>
      )}
    </div>
  );
};

export default App;
    setIsDragging(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const triggerFileSelect = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const resetFile = () => {
    setSelectedFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <div className="file-upload-container">
        <h1>Log Summarizer</h1>

        <div
          className={`file-drop-area ${isDragging ? 'drag-over' : ''}`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
          onClick={triggerFileSelect}
        >
          <p>Drag & drop a file here or click to browse</p>
          {selectedFile && (
            <div className="file-info">
              <p>Selected: {selectedFile.name}</p>
              <button onClick={resetFile}>Remove</button>
            </div>
          )}
        </div>

        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          style={{ display: 'none' }}
        />
.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-upload-container {
  max-width: 600px;
  margin: auto;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 20px;
  text-align: center;
  margin-bottom: 20px;
  cursor: pointer;
  transition: border-color 0.3s ease;
}

.file-drop-area.drag-over {
  border-color: #007bff;
}

.file-info {
  margin-top: 10px;
}

.file-preview {
  margin-top: 20px;
  padding: 10px;
  background-color: #f9f9f9;
  border-radius: 4px;
}
            <p>{selectedFile.name}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const processLogs = () => {
    if (selectedFile) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        const lines = content.split('\n').filter(line => line.trim() !== '');
        setLogs(lines);
      };
      reader.readAsText(selectedFile);
    }
  };

  return (
    <div className="app">
      <div className="file-upload-container">
        <h1>Log Summarizer</h1>
        <div
          className={`drop-zone ${isDragging ? 'dragging' : ''}`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          <input
            type="file"
            id="fileInput"
            className="file-input"
            onChange={handleFileChange}
            accept=".json"
          />
          <label htmlFor="fileInput" className="file-label">
            {selectedFile ? selectedFile.name : 'Choose or drop a JSON file'}
          </label>
        </div>

        {selectedFile && (
          <button onClick={processLogs} className="process-button">
            Process Logs
          </button>
        )}

        {logs.length > 0 && (
          <div className="log-output">
            <h2>Processed Logs:</h2>
.app {
  text-align: center;
  padding: 20px;
}

.file-upload-container {
  max-width: 600px;
  margin: auto;
}

.drop-zone {
  border: 2px dashed #ccc;
  padding: 20px;
  margin: 20px 0;
  border-radius: 8px;
  transition: all 0.3s ease;
}

.drop-zone.dragging {
  border-color: #007bff;
  background-color: #f0f8ff;
}

.file-input {
  display: none;
}

.file-label {
  cursor: pointer;
  font-size: 16px;
  color: #007bff;
}

.process-button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  border-radius: 4px;
  cursor: pointer;
}

.log-output {
  margin-top: 20px;
  text-align: left;
}
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const triggerFileSelect = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="app">
      <div className="file-upload-container">
        <h1>Log Summarizer</h1>
        <div
          className="drop-zone"
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onClick={triggerFileSelect}
        >
          <p>Drag & drop a file here or click to browse</p>
          <input
            type="file"
            ref={fileInputRef}
/* Add basic styles for the file upload UI */

.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-upload-container {
  text-align: center;
}

.drop-zone {
  border: 2px dashed #ccc;
  padding: 40px;
  margin: 20px auto;
  width: 300px;
  cursor: pointer;
  transition: border-color 0.3s ease;
}

.drop-zone:hover {
  border-color: #007bff;
}
          />
        </div>
        {selectedFile && (
          <p>Selected file: {selectedFile.name}</p>
        )}
      </div>
    </div>
  );
};

export default App;

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const handleProcess = () => {
    if (selectedFile) {
      setIsProcessing(true);
      // TODO: Implement file processing logic here
      setTimeout(() => setIsProcessing(false), 1000);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div
        className="file-drop-area"
        onDragOver={(e) => e.preventDefault()}
        onDrop={handleDrop}
      >
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          className="file-input"
        />
        <p>Drag & drop a file here or click to browse</p>
      </div>
      {selectedFile && (
.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 20px;
  text-align: center;
  margin: 20px 0;
  transition: border-color 0.3s ease;
}

.file-drop-area:hover {
  border-color: #007bff;
}

.file-input {
  display: none;
}

.file-info {
  margin-top: 20px;
  padding: 10px;
  background-color: #f9f9f9;
  border-radius: 4px;
}
          </button>
        </div>
      )}
    </div>
  );
};

export default App;
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFile(e.dataTransfer.files[0]);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div
        className={`file-drop-area ${isDragging ? 'dragging' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <input
          type="file"
/* Add basic styles for file picker */
.app {
  padding: 20px;
  text-align: center;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 20px;
  margin: 20px auto;
  width: 300px;
  transition: border-color 0.3s ease;
}

.file-drop-area.dragging {
  border-color: #007bff;
}

.file-input {
  display: none;
}
        <p>Drag & drop a log file here or click to browse</p>
      </div>
      {file && <p>Selected file: {file.name}</p>}
    </div>
  );
};

export default App;
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFile(e.dataTransfer.files[0]);
    }
  };

  const triggerFileSelect = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileSubmit = () => {
    if (file) {
      console.log('Selected file:', file.name);
      // TODO: Implement ingestion pipeline here
    }
  };

  return (
    <div className="app">
      <div className="file-upload-container">
        <h1>Log Summarizer</h1>

        <div
          className={`file-drop-area ${isDragging ? 'drag-over' : ''}`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
          onClick={triggerFileSelect}
        >
          <p>Drag & drop your log file here or click to browse</p>
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            className="file-input"
            accept=".json"
          />
        </div>

        {file && (
/* Add file picker and local ingestion pipeline UI styles */

.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-upload-container {
  max-width: 600px;
  margin: auto;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 40px;
  text-align: center;
  margin-bottom: 20px;
  cursor: pointer;
  transition: border-color 0.3s ease;
}

.file-drop-area.drag-over {
  border-color: #007bff;
}

.file-input {
  display: none;
}

.file-info {
  margin-top: 20px;
  padding: 10px;
  background-color: #f9f9f9;
  border-radius: 4px;
}

.submit-btn {
  margin-top: 10px;
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.submit-btn:hover {
  background-color: #0056b3;
}
              Ingest File
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFile(e.dataTransfer.files[0]);
    }
  };

  const triggerFileSelect = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="app">
      <div className="file-upload-container">
        <h1>Log Summarizer</h1>

        <div
          className={`file-drop-area ${isDragging ? 'drag-over' : ''}`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
          onClick={triggerFileSelect}
        >
          <p>Drag & drop your log file here or click to browse</p>
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            className="file-input"
            accept=".json"
          />
        </div>
.app {
  padding: 20px;
}

.file-upload-container {
  max-width: 600px;
  margin: 0 auto;
  text-align: center;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 40px 20px;
  margin: 20px 0;
  border-radius: 8px;
  transition: all 0.3s ease;
  cursor: pointer;
}

.file-drop-area.drag-over {
  border-color: #007bff;
  background-color: #f0f8ff;
}

.file-input {
  display: none;
}

.file-info {
  margin-top: 20px;
  padding: 10px;
  background-color: #f9f9f9;
  border-radius: 4px;
}
            <p>Selected file: {file.name}</p>
            <p>Size: {(file.size / 1024).toFixed(2)} KB</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  return (
    <div className="app">
      <div className="file-upload-container">
        <h1>Log Summarizer</h1>

        <div
          className={`file-drop-area ${isDragging ? 'dragging' : ''}`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            className="file-input"
            accept=".json"
          />
          <p>Drag & drop a JSON log file here or click to browse</p>
        </div>

.app {
  padding: 20px;
}

.file-upload-container {
  max-width: 600px;
  margin: auto;
  text-align: center;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 40px;
  margin: 20px 0;
  transition: all 0.3s ease;
}

.file-drop-area.dragging {
  border-color: #007bff;
  background-color: #f0f8ff;
}

.file-input {
  display: none;
}

.file-info {
  margin-top: 20px;
  font-weight: bold;
}
          </div>
        )}
      </div>
    </div>
  );
};

export default App;

  const processFiles = () => {
    // TODO: Implement ingestion logic here
    console.log('Processing files:', selectedFiles);
  };

  return (
    <div className="app-container">
      <h1>Log Summarizer</h1>
      <input
        type="file"
        multiple
        onChange={handleFileChange}
        className="file-picker"
      />
      <button onClick={processFiles} className="process-button">
        Process Logs
      </button>
    </div>
  );
};
/* Add basic styling for file picker and button */
.app-container {
  padding: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.file-picker {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.process-button {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.process-button:hover {
  background-color: #0056b3;
}
const root = ReactDOM.createRoot(

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker {
  margin-top: 20px;
  padding: 15px;
  border: 1px dashed #ccc;
  border-radius: 5px;
}
        <input type="file" onChange={handleFileChange} />
        {selectedFile && <p>Selected file: {selectedFile.name}</p>}
      </div>
    </div>
  );
}

export default App;
  const handleIngest = () => {
    if (selectedFile) {
      console.log('Ingesting file:', selectedFile.name);
      // TODO: Implement ingestion logic here
    }
  };

  return (
    <div className="app-container">
      <h1>Log Summarizer</h1>
      <div className="file-picker-container">
        <input
          type="file"
          id="fileInput"
          onChange={handleFileChange}
          accept=".json"
        />
        <label htmlFor="fileInput" className="file-label">
          Choose JSON Log File
        </label>
        {selectedFile && (
          <p>Selected file: {selectedFile.name}</p>
        )}
        <button onClick={handleIngest} className="ingest-button">
          Ingest File
        </button>
      </div>
    </div>
  );
};
/* Global Styles */

.app-container {
  padding: 2rem;
  font-family: Arial, sans-serif;
}

.file-picker-container {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-width: 400px;
}

.file-label {
  display: inline-block;
  padding: 0.5rem 1rem;
  background-color: #007bff;
  color: white;
  border-radius: 4px;
  cursor: pointer;
  text-align: center;
}

.ingest-button {
  padding: 0.5rem 1rem;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

/* Responsive adjustments */
@media (max-width: 600px) {
  .app-container {
    padding: 1rem;
  }

  .file-picker-container {
    width: 100%;
  }
}
function App() {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

.app {
  text-align: center;
  padding: 2rem;
}

.file-picker {
  margin-top: 1rem;
  padding: 1rem;
  border: 1px dashed #ccc;
  border-radius: 4px;
}
      <div className="file-picker">
        <input type="file" accept=".json" onChange={handleFileChange} />
        {selectedFile && <p>Selected file: {selectedFile.name}</p>}
      </div>
    </div>
  );
}

export default App;
  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div className="file-picker">
        <input
          type="file"
          accept=".json"
.app {
  text-align: center;
  padding: 2rem;
}

.file-picker {
  margin-top: 1rem;
  padding: 1rem;
  border: 1px dashed #ccc;
  border-radius: 4px;
}
          <p>Selected file: {selectedFile.name}</p>
        )}
      </div>
    </div>
  );
}

export default App;

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div className="file-picker">
        <input
          type="file"
          id="fileInput"
          onChange={handleFileChange}
.app {
  text-align: center;
  padding: 2rem;
}

.file-picker {
  margin-top: 1rem;
}

.file-picker input[type="file"] {
  display: none;
}

.file-picker label {
  background-color: #007bff;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
}

.file-picker label:hover {
  background-color: #0056b3;
}
        {selectedFile && (
          <p>Selected file: {selectedFile.name}</p>
        )}
      </div>
    </div>
  );
}

export default App;

  const handleIngest = () => {
    if (!selectedFile) return;
    setIsProcessing(true);
    // TODO: Implement ingestion logic here
    console.log('Ingesting file:', selectedFile.name);
    setIsProcessing(false);
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div className="file-picker">
        <input
          type="file"
          accept=".json"
.app {
  text-align: center;
  padding: 2rem;
}

.file-picker {
  margin-top: 1rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.file-picker input {
  padding: 0.5rem;
}

.file-picker button {
  padding: 0.5rem 1rem;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.file-picker button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}
          {isProcessing ? 'Processing...' : 'Ingest Log'}
        </button>
      </div>
    </div>
  );
}
    }
  };

  return (
    <div className="App">
      <h1>Log Summarizer</h1>
      <div className="file-picker-container">
        <input
          type="file"
          accept=".json"
.App {
  text-align: center;
}

.file-picker-container {
  margin-top: 20px;
  padding: 20px;
  border: 2px dashed #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.file-input {
  margin-top: 10px;
  padding: 10px;
  border-radius: 4px;
  border: 1px solid #ddd;
}
        {selectedFile && (
          <p>Selected file: {selectedFile.name}</p>
        )}
      </div>
    </div>
  );
}

export default App;
  const handleIngest = () => {
    if (selectedFile) {
      console.log('Ingesting file:', selectedFile.name);
      // TODO: Implement ingestion logic here
    }
  };

.app {
  padding: 20px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  align-items: flex-start;
}

.file-picker {
        Ingest
      </button>
    </div>
  );
}

export default App;
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const droppedFile = e.dataTransfer.files?.[0] || null;
    setFile(droppedFile);
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };
/* Global Styles */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.app {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 2rem;
}

.file-picker-container {
  margin-bottom: 1rem;
}

.drop-zone {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 2rem;
  text-align: center;
  width: 100%;
  max-width: 500px;
  transition: border-color 0.3s ease;
}

.drop-zone:hover {
  border-color: #007bff;
}

.file-input {
  display: none;
}

.summary {
  margin-top: 1rem;
  padding: 1rem;
  background-color: #f9f9f9;
  border-radius: 4px;
  width: 100%;
  max-width: 500px;
}
    </div>
  );
};

export default App;
  border-color: #007bff;
}

.drop-zone {
  cursor: pointer;
}

.file-info {
  margin-top: 20px;
}

.summary {
  margin-top: 30px;
  padding: 20px;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
      {file && (
        <div className="file-info">
          <p>Selected file: {file.name}</p>
          <button onClick={handleIngest} disabled={isProcessing}>
            {isProcessing ? 'Processing...' : 'Ingest & Summarize'}
          </button>
        </div>
      )}

      {summary && (
        <div className="summary">
          <h2>Summary</h2>
          <pre>{summary}</pre>
        </div>
      )}
    </div>
  );
};

export default App;
        />
        <button onClick={() => fileInputRef.current?.click()}>
          Or choose a file
        </button>

        {selectedFile && (
          <p className="file-name">Selected: {selectedFile.name}</p>
        )}

        {isProcessing && <p>Processing...</p>}

        <button onClick={handleIngest} disabled={!selectedFile || isProcessing}>
          Ingest Log
        </button>
      </div>
    </div>
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.app {
  padding: 20px;
  text-align: center;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 20px;
  margin: 20px auto;
  width: 300px;
  transition: all 0.3s ease;
}

.file-drop-area.dragging {
  border-color: #007bff;
  background-color: #f0f8ff;
}

.file-name {
  margin-top: 10px;
  font-weight: bold;
}

.file-drop-area button {
  margin-top: 10px;
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
}

.file-drop-area button:hover {
  background-color: #0056b3;
}

.file-drop-area button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleProcess = () => {
    if (selectedFile && !isProcessing) {
      setIsProcessing(true);
      // Simulate processing
      setTimeout(() => {
        setIsProcessing(false);
      }, 2000);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div
        className={`file-drop-area ${selectedFile ? 'has-file' : ''}`}
        onDrop={handleDrop}
        onDragOver={handleDragOver}
      >
        <p>Drag & drop your log file here or click to browse</p>
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          className="file-input"
        />
        {selectedFile && (
          <p className="file-name">{selectedFile.name}</p>
        )}
      </div>

      <button
        onClick={handleProcess}
        disabled={!selectedFile || isProcessing}
        className="process-button"
      >
.app {
  text-align: center;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 20px;
  margin: 20px 0;
  border-radius: 8px;
  transition: all 0.3s ease;
  background-color: #f9f9f9;
}

.file-drop-area.has-file {
  border-color: #007bff;
  background-color: #e6f2ff;
}

.file-input {
  display: none;
}

.file-name {
  margin-top: 10px;
  font-weight: bold;
}

.process-button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.process-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.loading-indicator {
  margin-top: 20px;
  color: #666;
}
export default App;
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const handleProcess = () => {
    if (selectedFile) {
      setIsProcessing(true);
      // Simulate processing
      setTimeout(() => {
        setIsProcessing(false);
        alert('File processed successfully!');
      }, 2000);
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div
        className={`file-drop-area ${isDragging ? 'dragging' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <p>Drag & drop your log file here or click to browse</p>
        <input
          type="file"
          ref={fileInputRef}
.app {
  text-align: center;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 40px;
  margin: 20px auto;
  width: 300px;
  transition: border-color 0.3s ease;
  position: relative;
  cursor: pointer;
}

.file-drop-area.dragging {
  border-color: #007bff;
}

.file-input {
  display: none;
}

.file-info {
  margin-top: 20px;
}

.file-info p {
  margin: 10px 0;
}

.file-info button {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.file-info button:hover:not(:disabled) {
  background-color: #0056b3;
}

.file-info button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}
};

export default App;
            if (e.target.files && e.target.files.length > 0) {
              setIsProcessing(true);
              // Simulate processing
              setTimeout(() => setIsProcessing(false), 2000);
            }
          }}
.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.upload-area {
  border: 2px dashed #ccc;
  padding: 20px;
  text-align: center;
  margin: 20px 0;
}
        </button>

        {isDragging && <p className="drag-over">Drop files here</p>}
      </div>

      {isProcessing && <p>Processing...</p>}
    </div>
  );
};

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    const files = e.dataTransfer.files;
    if (files.length > 0) {
      processFile(files[0]);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      processFile(e.target.files[0]);
    }
  };

  const processFile = (file: File) => {
    setIsProcessing(true);
    setFileName(file.name);

    // Simulate file processing
    setTimeout(() => {
      setIsProcessing(false);
    }, 2000);
  };

  const triggerFileInput = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div
        className={`file-drop-area ${isDragging ? 'dragging' : ''} ${isProcessing ? 'processing' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        onClick={triggerFileInput}
      >
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".json"
          style={{ display: 'none' }}
        />
.app {
  text-align: center;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 40px;
  margin: 20px auto;
  width: 300px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.file-drop-area.dragging {
  border-color: #007bff;
  background-color: #e6f7ff;
}

.file-drop-area.processing {
  border-color: #28a745;
  background-color: #d4edda;
}

.file-info {
  margin-top: 20px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
  --card: #0b1524;
.drop-area:hover {
  background-color: rgba(96, 165, 250, 0.1);
  const [logEntries, setLogEntries] = useState<LogEntry[]>([]);
  const [isDragging, setIsDragging] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
  --border: #1e293b;
  --card-border: #2d3748;
}

.processing-indicator {
  color: var(--accent);
  font-weight: bold;
}

.drop-area {
  border: 2px dashed var(--accent);

.file-picker {
  margin-bottom: 20px;
}

.file-button {
  background-color: var(--accent);
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

    const reader = new FileReader();

    reader.onload = (e) => {
      const content = e.target?.result as string;
      setLogContent(content);

  color: var(--success);
}

.error {
  margin-top: 10px;
  color: var(--error);
      } catch (e) {
        setError('Failed to parse log content.');
        setLogEntries([]);
      }
    };

    reader.onerror = () => {
  background-color: var(--accent);
  color: white;
  border: none;
  padding: 10px 20px;
  };

  const handleProcessLogs = () => {
    if (!logContent) return;

    // Validate content is valid JSON
    try {
      JSON.parse(logContent);
    } catch (e) {
      setError('Invalid JSON content. Please check your file.');
      return;
    // Reset any previous summary
    setSummary('');
    setIsProcessing(true);
    // Simulate processing and summarization
    // Simulate processing and summarization
    setTimeout(() => {
      // Format summary with markdown
      const summaryText = `Summary of ${logEntries.length} log entries processed from file "${fileName}".`;
      setSummary(summaryText);
  padding: 10px;
  border-radius: 4px;
  overflow-x: auto;
}

.clear-button {
  background-color: var(--error);
  color: white;
  };

  const handleFileSelect = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };
.clear-button:hover {
  background-color: #dc2626;
}

  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
  };

  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
  };

  const handleDropAreaClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };
  // Add test to verify file parsing logic
  const testFileParsing = () => {
    // Mock data for testing
    const mockLogData = [
      { timestamp: "2023-01-01T00:00:00Z", level: "INFO", message: "Application started" },
      { timestamp: "2023-01-01T00:01:00Z", level: "ERROR", message: "Database connection failed" }
    ];
      setLogEntries(entries);
      return true;
    } catch (e) {
      setError('Failed to parse mock log content.');
      setLogEntries([]);
      return false;
    }
  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div className="status-indicator">
      <div
        className="file-picker"
        onDragOver={handleDragOver}
        <div
          onClick={handleDropAreaClick}
          className="drop-area"
          style={isDragging ? { backgroundColor: 'rgba(96, 165, 250, 0.2)' } : undefined}
        >

          <button onClick={handleFileSelect} className="file-button">
        </div>

        {fileName && (
          <div className="file-info">
            Selected file: <strong>{fileName}</strong>
          </div>
        )}

        {isProcessing && (
          <div className="processing-indicator">
            Processing logs...
          </div>
        )}

        {error && <div className="error">{error}</div>}
      </div>

      <div className="file-drop-hint">
        Or drag and drop a JSON file here
      </div>

      {logContent && !isProcessing && (
        <div className="file-info">
          Selected file: <strong>{fileName}</strong>
        </div>
      {error && <div className="error">{error}</div>}
    </div>

    <div className="file-drop-hint">
      Or drag and drop a JSON file here
    </div>

    {logContent && !isProcessing && (
      <div className="log-preview">
        <h2>Log Preview</h2>
      <div className="test-section">
        <h3>Test Section</h3>

        <button onClick={testFileParsing} className="test-button">
          Run Test
        </button>
      </div>
      <button
        onClick={handleProcessLogs}
        disabled={!logContent || isProcessing}
        className="process-button"
      >

        {isProcessing ? 'Processing...' : 'Process Logs'}
      {summary && (
        <div className="summary">
          <h2>Summary</h2>
          <div dangerouslySetInnerHTML={{ __html: marked(summary) }} />
        </div>
      )}
