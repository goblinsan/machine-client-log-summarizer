import React, { useState, useRef } from 'react';

const App: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [fileContent, setFileContent] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      setError(null);
      setFileContent(null);

      // Validate file type (e.g., .log, .txt)
      if (!file.name.endsWith('.log') && !file.name.endsWith('.txt')) {
        setError('Invalid file type. Please select a .log or .txt file.');
        return;
      }

      // Read file content
      const reader = new FileReader();
      reader.onload = (event) => {
        const content = event.target?.result as string;
        setFileContent(content);
      };

      reader.onerror = () => {
        setError('Failed to read file.');
      };

      reader.readAsText(file);
    }
  };

  const handleIngestion = () => {
    if (!selectedFile) {
      setError('No file selected.');
      return;
    }

    setIsProcessing(true);

    // Simulate ingestion process
    setTimeout(() => {
      setIsProcessing(false);
      alert(`Successfully ingested file: ${selectedFile.name}`);
    }, 1500);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setFileContent(null);
    setError(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Machine Client Log Summarizer</h1>

      <div className="file-picker-container">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
        />

        {selectedFile && (
          <div className="file-info">
            <p>Selected file: {selectedFile.name}</p>
            <p>Size: {selectedFile.size} bytes</p>

            {isProcessing ? (
              <p className="processing">Processing...</p>
            ) : (
              <button onClick={handleIngestion} className="ingest-button">
                Ingest File
              </button>
            )}

            <button onClick={handleReset} className="reset-button">
              Reset
            </button>

            {error && <p className="error">{error}</p>}

            {fileContent && (
              <div className="file-content">
                <h3>File Content Preview:</h3>
.app {
  font-family: Arial, sans-serif;
  padding: 20px;
}

.file-picker-container {
  margin-top: 20px;
}

.file-info {
  margin-top: 10px;
}

.processing {
  color: #007bff;
}

.ingest-button,
.reset-button {
  margin-top: 10px;
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
}

.ingest-button:hover,
.reset-button:hover {
  background-color: #0056b3;
}

.error {
  color: red;
  margin-top: 10px;
}

.file-content {
  margin-top: 20px;
  padding: 10px;
  background-color: #f8f9fa;
  border: 1px solid #dee2e6;
}
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
    if (file) {
      setSelectedFile(file);
      setError(null);
    }
  };

  const handleIngest = () => {
    if (!selectedFile) {
      setError('No file selected');
      return;
    }

    setIsIngesting(true);
    setIngestionResult(null);

    const reader = new FileReader();

    reader.onload = (e) => {
      try {
        const content = e.target?.result as string;
        const parsed = JSON.parse(content);

        // Simulate ingestion logic
        setIngestionResult(`Successfully ingested file: ${selectedFile.name}`);
        setIsIngesting(false);
      } catch (err) {
        setError('Failed to parse JSON file');
        setIsIngesting(false);
      }
    };

    reader.onerror = () => {
      setError('Failed to read file');
      setIsIngesting(false);
    };

    reader.readAsText(selectedFile);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const file = e.dataTransfer.files?.[0];
    if (file && file.type === 'application/json') {
      setSelectedFile(file);
      setError(null);
    } else {
      setError('Please drop a valid JSON file');
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  return (
    <div className="app" onDrop={handleDrop} onDragOver={handleDragOver}>
      <h1>Machine Client Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          accept=".json"
          onChange={handleFileChange}
          ref={fileInputRef}
        />
        <button onClick={() => fileInputRef.current?.click()}>
          Select JSON Log File
        </button>

        {selectedFile && (
          <p className="file-info">
            Selected file: {selectedFile.name} ({(selectedFile.size / 1024).toFixed(2)} KB)
          </p>
        )}

        {isIngesting && <p className="loading">Ingesting...</p>}

        {ingestionResult && (
          <div className="success">
            <p>{ingestionResult}</p>
          </div>
        )}

.app {
  text-align: center;
  padding: 20px;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.file-picker {
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
  width: 80%;
  max-width: 500px;
}

.file-info {
  margin-top: 10px;
  color: #333;
}

.loading {
  color: #007bff;
}

.success {
  color: #28a745;
}

.error {
  color: #dc3545;
}
          Ingest Log File
        </button>
      </div>
    </div>
  );
};

export default App;
    const file = e.target.files?.[0] || null;
    setSelectedFile(file);
    setSummary(null);
    setError(null);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const file = e.dataTransfer.files?.[0] || null;
    setSelectedFile(file);
    setSummary(null);
    setError(null);
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleIngestion = async () => {
    if (!selectedFile) {
      setError('Please select a file first');
      return;
    }

    setIsProcessing(true);
    setError(null);

    try {
      // Simulate file reading and ingestion
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;

        // Simulate processing with a mock summary
        const mockSummary = `Processed ${selectedFile.name} with ${content.length} characters`;

        setSummary(mockSummary);
        setIsProcessing(false);
      };

      reader.onerror = () => {
        setError('Failed to read file');
        setIsProcessing(false);
      };

      reader.readAsText(selectedFile);
    } catch (err) {
      setError('Error processing file');
      setIsProcessing(false);
    }
  };

  const handleReset = () => {
    setSelectedFile(null);
    setSummary(null);
    setError(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Machine Client Log Summarizer</h1>

      <div
        className="file-drop-area"
        onDrop={handleDrop}
        onDragOver={handleDragOver}
      >
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
          style={{ display: 'none' }}
        />

        <div className="file-picker">
          <button
            onClick={() => fileInputRef.current?.click()}
            className="file-picker-button"
          >
            {selectedFile ? selectedFile.name : 'Select Log File'}
          </button>

          {selectedFile && (
            <div className="file-info">
              <span>Size: {(selectedFile.size / 1024).toFixed(2)} KB</span>
            </div>
          )}

          <div className="file-drop-text">
            or drag and drop a log file here
          </div>
        </div>
      </div>

      {selectedFile && (
        <div className="action-buttons">
          <button
            onClick={handleIngestion}
            disabled={isProcessing}
            className="ingestion-button"
          >
            {isProcessing ? 'Processing...' : 'Process File'}
          </button>

          <button onClick={handleReset} className="reset-button">
            Reset
          </button>
        </div>
      )}

      {error && <div className="error-message">{error}</div>}

      {summary && (
        <div className="summary-container">
          <h2>Summary</h2>
          <div className="summary-content">{summary}</div>
        </div>
      )}
/* App Styles */
.app {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-drop-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 20px;
  text-align: center;
  margin-bottom: 20px;
  transition: border-color 0.3s ease;
}

.file-drop-area:hover {
  border-color: #007bff;
}

.file-picker-button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.file-picker-button:hover {
  background-color: #0056b3;
}

.file-info {
  margin-top: 10px;
  font-size: 14px;
  color: #666;
}

.file-drop-text {
  margin-top: 10px;
  font-size: 14px;
  color: #999;
}

.action-buttons {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.ingestion-button,
.reset-button {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.ingestion-button {
  background-color: #28a745;
  color: white;
}

.ingestion-button:hover {
  background-color: #218838;
}

.reset-button {
  background-color: #6c757d;
  color: white;
}

.reset-button:hover {
  background-color: #5a6268;
}

.error-message {
  color: #dc3545;
  margin-bottom: 20px;
}

.summary-container {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
}

.summary-content {
  background-color: #f8f9fa;
  padding: 15px;
  border-radius: 4px;
  white-space: pre-wrap;
}

.loading-indicator {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
}

.spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #007bff;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
      {isProcessing && (
        <div className="loading-indicator">
          <div className="spinner"></div>
          <p>Processing file...</p>
        </div>
      )}
    </div>
  );
};

export default App;
  };

  const handleIngest = () => {
    if (!selectedFile) return;

    setIsProcessing(true);

    // Simulate file reading and processing
    const reader = new FileReader();
    reader.onload = (event) => {
      const content = event.target?.result as string;
      setProcessedData(content);
      setIsProcessing(false);
    };

    reader.readAsText(selectedFile);
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div className="file-picker">
        <label htmlFor="fileInput">Choose a log file:</label>
        <input
          type="file"
          id="fileInput"
          onChange={handleFileChange}
        />

        {selectedFile && (
          <p>Selected file: {selectedFile.name}</p>
        )}

        <button onClick={handleIngest} disabled={!selectedFile || isProcessing}>
          {isProcessing ? 'Processing...' : 'Ingest Log'}
        </button>
      </div>

/* existing styles... */

.file-picker {
  margin: 20px 0;
  padding: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background-color: #f9f9f9;
}

.file-picker label {
  display: block;
  margin-bottom: 10px;
  font-weight: bold;
}

.file-picker input[type="file"] {
  margin-bottom: 10px;
}

.file-picker button {
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.file-picker button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.result {
  margin-top: 20px;
  padding: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background-color: #fff;
}

.result h2 {
  margin-top: 0;
}

.result pre {
  white-space: pre-wrap;
  word-break: break-word;
}
          <h2>Processed Data:</h2>
          <pre>{processedData}</pre>
        </div>
      )}
    </div>
  );
};

export default App;
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setIsProcessing(true);

    const reader = new FileReader();
    reader.onload = (event) => {
      const content = event.target?.result as string;
      setFileData({
        name: file.name,
        content: content,
      });
      setIsProcessing(false);
    };

    reader.onerror = () => {
      console.error('Failed to read file');
      setIsProcessing(false);
    };

    reader.readAsText(file);
  };

  const handleFileSelect = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="app-container">
      <h1>Log Summarizer</h1>

      <div className="file-picker-container">
        <button onClick={handleFileSelect} className="file-picker-button">
          Choose Log File
        </button>
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
          className="file-input"
        />

        {isProcessing && <p className="processing-text">Processing file...</p>}

        {fileData && (
          <div className="file-info">
            <p>Selected file: {fileData.name}</p>
            <pre className="file-content">{fileData.content}</pre>
          </div>
        )}
      </div>
    </div>
  );
};
/* Add your styles here */

.app-container {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker-container {
  margin-top: 20px;
}

.file-picker-button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  border-radius: 4px;
}

.file-picker-button:hover {
  background-color: #0056b3;
}

.file-input {
  display: none;
}

.processing-text {
  color: #007bff;
  font-style: italic;
}

.file-info {
  margin-top: 20px;
}

.file-content {
  background-color: #f4f4f4;
  padding: 10px;
  border-radius: 4px;
  white-space: pre-wrap;
  overflow-x: auto;
}
export default App;

const App: React.FC = () => {
  const [fileContent, setFileContent] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setIsProcessing(true);

    const reader = new FileReader();
    reader.onload = (event) => {
      const content = event.target?.result as string;
      setFileContent(content);
      setIsProcessing(false);
    };

    reader.onerror = () => {
      console.error('Failed to read file');
      setIsProcessing(false);
    };

    reader.readAsText(file);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const file = e.dataTransfer.files?.[0];
    if (!file) return;

    setIsProcessing(true);

    const reader = new FileReader();
    reader.onload = (event) => {
      const content = event.target?.result as string;
      setFileContent(content);
      setIsProcessing(false);
    };

    reader.onerror = () => {
      console.error('Failed to read file');
      setIsProcessing(false);
    };

    reader.readAsText(file);
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  return (
    <div className="app" onDrop={handleDrop} onDragOver={handleDragOver}>
      <h1>Machine Client Log Summarizer</h1>

      <div className="file-picker-container">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
          className="file-input"
        />
        <button
          onClick={() => fileInputRef.current?.click()}
          className="file-picker-button"
        >
          Choose File
        </button>

        {isProcessing && <p className="processing">Processing file...</p>}

.app {
  font-family: sans-serif;
  text-align: center;
  padding: 20px;
}

.file-picker-container {
  margin-top: 20px;
  padding: 20px;
  border: 1px dashed #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.file-input {
  display: none;
}

.file-picker-button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 10px;
}

.file-picker-button:hover {
  background-color: #0056b3;
}

.processing {
  color: #007bff;
}

.file-content {
  margin-top: 20px;
  text-align: left;
}

.file-content pre {
  background-color: #f4f4f4;
  padding: 10px;
  border-radius: 4px;
  overflow-x: auto;
}
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
  const [error, setError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];

    if (!file) {
      setError('No file selected');
      return;
    }

    if (!file.name.endsWith('.log')) {
      setError('Only .log files are allowed');
      return;
    }

    setIsProcessing(true);
    setError(null);

    const reader = new FileReader();

    reader.onload = (event) => {
      const content = event.target?.result as string;

      setFileData({
        name: file.name,
        content,
        size: file.size,
      });

      setIsProcessing(false);
    };

    reader.onerror = () => {
      setError('Failed to read file');
      setIsProcessing(false);
    };

    reader.readAsText(file);
  };

  const handleButtonClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Log Summarizer</h1>

        <div className="file-picker-container">
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            accept=".log"
            style={{ display: 'none' }}
          />

          <button onClick={handleButtonClick} className="file-picker-button">
/* Add your styles here */

.App {
  text-align: center;
  padding: 20px;
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

.file-picker-container {
  margin-top: 20px;
}

.file-picker-button {
  background-color: #61dafb;
  color: #282c34;
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.file-picker-button:hover {
  background-color: #29b6f6;
}

.processing,
.error {
  margin-top: 10px;
}

.error {
  color: #ff5252;
}

.file-info {
  margin-top: 20px;
  padding: 15px;
  background-color: #3a3d42;
  border-radius: 4px;
  max-width: 600px;
}

.content-preview {
  white-space: pre-wrap;
  word-break: break-word;
  background-color: #1e1e1e;
  padding: 10px;
  border-radius: 4px;
  overflow-x: auto;
  max-height: 200px;
  font-size: 14px;
}

.App-header h1 {
  margin-bottom: 20px;
}

.App-header p {
  margin: 5px 0;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .App-header h1 {
    font-size: 24px;
  }

  .file-info {
    padding: 10px;
  }

  .content-preview {
    font-size: 12px;
  }
}
export default App;
      setIsProcessing(false);
    }, 2000);
  };

  const handleReset = () => {
    setFile(null);
    setSummary(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Machine Client Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
        />
        <button onClick={handleIngest} disabled={!file || isProcessing}>
          {isProcessing ? 'Processing...' : 'Ingest File'}
        </button>
        <button onClick={handleReset} disabled={!file}>Reset</button>
      </div>

      {isProcessing && (
        <div className="loading-indicator">
          <p>Processing file...</p>
        </div>
      )}
.app {
  padding: 20px;
}

.file-picker {
  margin-bottom: 20px;
}

.file-picker input[type="file"] {
  margin-right: 10px;
}

.file-picker button {
  margin-right: 10px;
  padding: 8px 12px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.file-picker button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.loading-indicator {
  margin-top: 20px;
  color: #007bff;
}

.summary {
  margin-top: 20px;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 4px;
}
          <h2>Summary</h2>
          <p>{summary}</p>
        </div>
      )}
    </div>
  );
};

export default App;
  const [isProcessing, setIsProcessing] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] || null;
    setSelectedFile(file);
  };

  const handleIngest = () => {
    if (!selectedFile) return;

    setIsProcessing(true);
    const reader = new FileReader();

    reader.onload = (event) => {
      try {
        const content = event.target?.result as string;
        const parsedData: LogEntry[] = JSON.parse(content);
        setLogData(parsedData);
      } catch (error) {
        console.error('Failed to parse log file:', error);
        setLogData([]);
      } finally {
        setIsProcessing(false);
      }
    };

    reader.onerror = () => {
      console.error('Failed to read file');
      setIsProcessing(false);
    };

    reader.readAsText(selectedFile);
  };

  const triggerFileInput = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".json"
          style={{ display: 'none' }}
        />
        <button onClick={triggerFileInput} className="file-button">
          Choose Log File
        </button>

        {selectedFile && (
          <p className="file-info">
            Selected file: {selectedFile.name}
          </p>
        )}

        <button
          onClick={handleIngest}
          disabled={!selectedFile || isProcessing}
          className="ingest-button"
        >
          {isProcessing ? 'Processing...' : 'Ingest Log'}
        </button>
      </div>

      {logData.length > 0 && (
        <div className="log-preview">
          <h2>Log Preview</h2>
          <ul className="log-list">
            {logData.slice(0, 5).map((entry, index) => (
              <li key={index} className="log-item">
                <span className="timestamp">{entry.timestamp}</span>
                <span className="level">{entry.level}</span>
                <span className="message">{entry.message}</span>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};
/* Add new styles for file picker and log preview */

.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker {
  margin-bottom: 20px;
}

.file-button,
.ingest-button {
  padding: 10px 15px;
  margin-right: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  background-color: #007bff;
  color: white;
}

.file-button:hover,
.ingest-button:hover {
  background-color: #0056b3;
}

.file-button:disabled,
.ingest-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.file-info {
  margin-top: 10px;
  font-weight: bold;
}

.log-preview {
  margin-top: 20px;
}

.log-list {
  list-style-type: none;
  padding: 0;
}

.log-item {
  border-bottom: 1px solid #eee;
  padding: 10px 0;
}

.timestamp {
  font-weight: bold;
  color: #333;
}

.level {
  margin-left: 10px;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 0.9em;
}

.message {
  margin-left: 10px;
  color: #666;
}

.level.error {
  background-color: #f8d7da;
  color: #721c24;
}

.level.warn {
  background-color: #fff3cd;
  color: #856404;
}

.level.info {
  background-color: #d1ecf1;
  color: #0c5460;
}

.level.debug {
  background-color: #d4edda;
  color: #155724;
}

.level.trace {
  background-color: #f8f9fa;
  color: #343a40;
}

.ingest-button {
  margin-top: 10px;
}

.ingest-button:disabled {
  opacity: 0.6;
}

const App = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isIngesting, setIsIngesting] = useState(false);
  const [ingestionStatus, setIngestionStatus] = useState<string>('');
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      setIngestionStatus('');
    }
  };

  const handleIngest = () => {
    if (!selectedFile) return;

    setIsIngesting(true);
    setIngestionStatus('Processing file...');

    // Simulate ingestion process
    setTimeout(() => {
      setIsIngesting(false);
      setIngestionStatus('File processed successfully');
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setIngestionStatus('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Machine Client Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          accept=".json"
          onChange={handleFileChange}
          ref={fileInputRef}
        />
        <button onClick={handleIngest} disabled={!selectedFile || isIngesting}>
          {isIngesting ? 'Ingesting...' : 'Ingest File'}
        </button>
        <button onClick={handleReset} disabled={!selectedFile}>
          Reset
        </button>
      </div>

      {selectedFile && (
        <div className="file-info">
          <p>Selected file: {selectedFile.name}</p>
          <p>Size: {(selectedFile.size / 1024).toFixed(2)} KB</p>
/* Add new styles for file picker and ingestion feedback */

.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker {
  margin-bottom: 20px;
}

.file-picker input[type="file"] {
  margin-right: 10px;
}

.file-picker button {
  padding: 8px 16px;
  margin-right: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.file-picker button:hover {
  background-color: #0056b3;
}

.file-picker button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.file-info {
  margin-bottom: 20px;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.ingestion-status {
  padding: 10px;
  background-color: #d4edda;
  color: #155724;
  border-radius: 4px;
}

.ingestion-status p {
  margin: 0;
}

/* Existing styles from original file */

/* ... (existing CSS content) ... */
          <p>{ingestionStatus}</p>
        </div>
      )}
    </div>
  );
};

export default App;

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];

    if (!file) {
      setError('No file selected');
      return;
    }

    if (!file.name.endsWith('.log')) {
      setError('Only .log files are allowed');
      return;
    }

    const reader = new FileReader();

    reader.onload = (event) => {
      const content = event.target?.result as string;

      setFileData({
        name: file.name,
        content
      });

      setError(null);
    };

    reader.onerror = () => {
      setError('Failed to read file');
    };

    reader.readAsText(file);
  };

  const handleIngest = () => {
    if (!fileData) {
      setError('No file to ingest');
      return;
    }

    setIsProcessing(true);

    // Simulate ingestion logic here
    setTimeout(() => {
      setIsProcessing(false);
      // In a real app, this would be replaced with actual ingestion logic
      console.log('Ingesting file:', fileData.name);
    }, 1000);
  };

  const handleReset = () => {
    setFileData(null);
    setError(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Machine Client Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log"
        />

        {fileData && (
          <div className="file-info">
            <p>Selected file: {fileData.name}</p>
            <button onClick={handleIngest} disabled={isProcessing}>
              {isProcessing ? 'Processing...' : 'Ingest File'}
            </button>
          </div>
        )}

        {error && <p className="error">{error}</p>}

        {fileData && !isProcessing && (
          <button onClick={handleReset} className="reset-btn">
            Reset
          </button>
        )}
      </div>

      {fileData && !isProcessing && (
        <div className="summary">
          <h2>Summary</h2>
          <p>{fileData.content.substring(0, 100)}...</p>
        </div>
.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker {
  margin-bottom: 20px;
}

.file-info {
  margin-top: 10px;
}

.error {
  color: red;
  margin-top: 10px;
}

.reset-btn {
  margin-left: 10px;
  padding: 5px 10px;
  background-color: #f0f0f0;
  border: none;
  cursor: pointer;
}

.summary {
  margin-top: 20px;
}

.loading {
  margin-top: 20px;
}
        <div className="loading">
          <p>Processing file...</p>
        </div>
      )}
    </div>
  );
};

export default App;
}

const App = () => {
  const [selectedFile, setSelectedFile] = useState<FileData | null>(null);
  const [ingestionStatus, setIngestionStatus] = useState<IngestionStatus>({
    status: 'idle',
  });
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];

    if (!file) return;

    // Validate file type
    if (!file.name.endsWith('.log') && !file.name.endsWith('.txt')) {
      setIngestionStatus({
        status: 'error',
        message: 'Only .log and .txt files are allowed.',
      });
      return;
    }

    // Validate file size (10MB limit)
    if (file.size > 10 * 1024 * 1024) {
      setIngestionStatus({
        status: 'error',
        message: 'File size exceeds 10MB limit.',
      });
      return;
    }

    setSelectedFile({
      name: file.name,
      size: file.size,
      lastModified: file.lastModified,
    });

    setIngestionStatus({
      status: 'idle',
    });
  };

  const handleIngestion = () => {
    if (!selectedFile) return;

    setIngestionStatus({
      status: 'loading',
      message: 'Processing file...',
    });

    // Simulate ingestion process
    setTimeout(() => {
      setIngestionStatus({
        status: 'success',
        message: `Successfully processed ${selectedFile.name} in 2.3s`,
      });
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setIngestionStatus({
      status: 'idle',
    });
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div className="file-picker-container">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
          className="file-input"
        />

        <div className="file-info">
          {selectedFile ? (
            <p>
              Selected file: <strong>{selectedFile.name}</strong> ({(selectedFile.size / 1024).toFixed(2)} KB)
            </p>
          ) : (
            <p>No file selected</p>
          )}

          {ingestionStatus.status === 'error' && (
            <div className="error-message">
              {ingestionStatus.message}
            </div>
          )}

          <div className="action-buttons">
            {selectedFile && (
              <button
                onClick={handleIngestion}
                disabled={ingestionStatus.status === 'loading'}
                className="ingest-button"
              >
                {ingestionStatus.status === 'loading' ? 'Processing...' : 'Ingest File'}
              </button>
            )}

            {selectedFile && (
              <button onClick={handleReset} className="reset-button">
                Reset
              </button>
            )}
          </div>

/* Existing styles remain unchanged */

.app {
  padding: 2rem;
  font-family: Arial, sans-serif;
}

.file-picker-container {
  margin-top: 1rem;
}

.file-input {
  margin-bottom: 1rem;
}

.file-info p {
  margin: 0.5rem 0;
}

.error-message {
  color: red;
  font-weight: bold;
  margin-top: 0.5rem;
}

.success-message {
  color: green;
  font-weight: bold;
  margin-top: 0.5rem;
}

.action-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 1rem;
}

.ingest-button,
.reset-button {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.ingest-button {
  background-color: #007bff;
  color: white;
}

.ingest-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.reset-button {
  background-color: #6c757d;
  color: white;
}

.reset-button:hover {
  background-color: #5a6268;
}

.ingest-button:hover {
  background-color: #0056b3;
}

.file-info {
  border: 1px solid #ddd;
  padding: 1rem;
  border-radius: 4px;
  background-color: #f9f9f9;
}

.app h1 {
  color: #333;
}

/* Responsive adjustments */
@media (max-width: 600px) {
  .app {
    padding: 1rem;
  }

  .action-buttons {
    flex-direction: column;
  }

  .ingest-button,
  .reset-button {
    width: 100%;
  }
}
              {ingestionStatus.message}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default App;

    // Validate file type and size
    if (file.type !== 'text/plain' && !file.name.endsWith('.log') && !file.name.endsWith('.txt')) {
      setStatusMessage('Invalid file type. Please select a .log or .txt file.');
      return;
    }

    if (file.size > 10 * 1024 * 1024) {
      setStatusMessage('File too large. Maximum size is 10MB.');
      return;
    }

    setSelectedFile(file);
    setStatusMessage('');
  };

  const handleIngest = () => {
    if (!selectedFile) return;

    setIsProcessing(true);
    setStatusMessage('Ingesting file...');

    // Simulate ingestion process
    setTimeout(() => {
      setIsProcessing(false);
      setStatusMessage(`Successfully ingested ${selectedFile.name}`);
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setStatusMessage('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
        />
        <button
          onClick={handleIngest}
          disabled={!selectedFile || isProcessing}
          className="ingest-button"
        >
          {isProcessing ? 'Ingesting...' : 'Ingest File'}
        </button>
        <button onClick={handleReset} className="reset-button">
          Reset
        </button>
      </div>

      {selectedFile && (
        <p className="file-name">Selected file: {selectedFile.name}</p>
/* Existing styles... */

.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker {
  margin-bottom: 20px;
}

.file-picker input[type="file"] {
  margin-bottom: 10px;
}

.ingest-button,
.reset-button {
  padding: 10px 15px;
  margin-right: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.ingest-button {
  background-color: #007bff;
  color: white;
}

.ingest-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.reset-button {
  background-color: #6c757d;
  color: white;
}

.file-name {
  margin-top: 10px;
  font-weight: bold;
}

.status-message {
  margin-top: 10px;
  padding: 10px;
  border-radius: 4px;
}

.status-message.processing {
  background-color: #fff3cd;
  color: #856404;
}

.status-message:not(.processing) {
  background-color: #d4edda;
  color: #155724;
}
      {statusMessage && (
        <p className={`status-message ${isProcessing ? 'processing' : ''}`}>
          {statusMessage}
        </p>
      )}
    </div>
  );
};

export default App;

    // Validate file size (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      setError('File size exceeds 10MB limit');
      return;
    }

    // Validate file type (only .log files)
    if (!file.name.endsWith('.log')) {
      setError('Only .log files are allowed');
      return;
    }

    setSelectedFile(file);
    setError('');
  };

  const handleIngest = () => {
    if (!selectedFile) {
      setStatusMessage('No file selected');
      return;
    }

    setIsProcessing(true);
    setStatusMessage('Processing file...');

    // Simulate ingestion process
    setTimeout(() => {
      setIsProcessing(false);
      setStatusMessage('File processed successfully');
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setStatusMessage('');
    setError('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <div className="file-picker-container">
        <h1>Log Summarizer</h1>
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log"
          className="file-input"
        />

        {selectedFile && (
          <div className="file-info">
            <p>Selected file: {selectedFile.name}</p>
            <p>Size: {(selectedFile.size / 1024).toFixed(2)} KB</p>
          </div>
        )}

        {error && <p className="error">{error}</p>}

        <div className="button-group">
          <button onClick={handleIngest} disabled={!selectedFile || isProcessing}>
            {isProcessing ? 'Processing...' : 'Ingest File'}
          </button>
          <button onClick={handleReset} disabled={!selectedFile}>
            Reset
          </button>
        </div>
/* Existing styles remain unchanged */

.file-picker-container {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
  text-align: center;
}

.file-input {
  margin: 20px 0;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 100%;
  box-sizing: border-box;
}

.file-info {
  margin: 15px 0;
  padding: 10px;
  background-color: #f5f5f5;
  border-radius: 4px;
}

.error {
  color: red;
  margin: 10px 0;
}

.button-group {
  margin: 20px 0;
}

.button-group button {
  padding: 10px 20px;
  margin: 0 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  background-color: #007bff;
  color: white;
}

.button-group button:hover {
  background-color: #0056b3;
}

.button-group button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.status-message {
  margin-top: 20px;
  padding: 10px;
  background-color: #d4edda;
  color: #155724;
  border-radius: 4px;
}

.status-message p {
  margin: 0;
}
          <div className="status-message">
            <p>{statusMessage}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
  display: none;
}

.file-picker-button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
}

.file-picker-button:hover {
  background-color: #0056b3;
}

.ingestion-button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  margin-top: 10px;
}

.ingestion-button:hover:not(:disabled) {
  background-color: #218838;
}

.ingestion-button:disabled {
  background-color: #6c757d;
}

.status {
  margin-top: 10px;
  color: #28a745;
}

.file-info {
  margin-top: 10px;
  font-weight: bold;
}
