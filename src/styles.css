import React, { useState, useRef } from 'react';
import './styles.css';

const App: React.FC = () => {
  const [isDragging, setIsDragging] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  return (
    <div className="app">
      <h1>Log Summarizer</h1>
  const [isProcessing, setIsProcessing] = useState(false);
      <div className="upload-area">
        <p>Drag & drop files here or click to browse</p>
        <input
          type="file"
          ref={fileInputRef}
          onChange={(e) => {
            if (e.target.files && e.target.files.length > 0) {
              setIsProcessing(true);
              // Simulate processing
              setTimeout(() => setIsProcessing(false), 2000);
            }
          }}
.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.upload-area {
  border: 2px dashed #ccc;
  padding: 20px;
  text-align: center;
  margin: 20px 0;
}
        </button>

        {isDragging && <p className="drag-over">Drop files here</p>}
      </div>

      {isProcessing && <p>Processing...</p>}
    </div>
  );
};

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    const files = e.dataTransfer.files;
    if (files.length > 0) {
      processFile(files[0]);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      processFile(e.target.files[0]);
    }
  };

  const processFile = (file: File) => {
    setIsProcessing(true);
    setFileName(file.name);

    // Simulate file processing
    setTimeout(() => {
      setIsProcessing(false);
    }, 2000);
  };

  const triggerFileInput = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div
        className={`file-drop-area ${isDragging ? 'dragging' : ''} ${isProcessing ? 'processing' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        onClick={triggerFileInput}
      >
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".json"
          style={{ display: 'none' }}
        />
.app {
  text-align: center;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-drop-area {
  border: 2px dashed #ccc;
  padding: 40px;
  margin: 20px auto;
  width: 300px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.file-drop-area.dragging {
  border-color: #007bff;
  background-color: #e6f7ff;
}

.file-drop-area.processing {
  border-color: #28a745;
  background-color: #d4edda;
}

.file-info {
  margin-top: 20px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
  --card: #0b1524;
.drop-area:hover {
  background-color: rgba(96, 165, 250, 0.1);
  const [logEntries, setLogEntries] = useState<LogEntry[]>([]);
  const [isDragging, setIsDragging] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
  --border: #1e293b;
  --card-border: #2d3748;
}

.processing-indicator {
  color: var(--accent);
  font-weight: bold;
}

.drop-area {
  border: 2px dashed var(--accent);

.file-picker {
  margin-bottom: 20px;
}

.file-button {
  background-color: var(--accent);
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

    const reader = new FileReader();

    reader.onload = (e) => {
      const content = e.target?.result as string;
      setLogContent(content);

  color: var(--success);
}

.error {
  margin-top: 10px;
  color: var(--error);
      } catch (e) {
        setError('Failed to parse log content.');
        setLogEntries([]);
      }
    };

    reader.onerror = () => {
  background-color: var(--accent);
  color: white;
  border: none;
  padding: 10px 20px;
  };

  const handleProcessLogs = () => {
    if (!logContent) return;

    // Validate content is valid JSON
    try {
      JSON.parse(logContent);
    } catch (e) {
      setError('Invalid JSON content. Please check your file.');
      return;
    // Reset any previous summary
    setSummary('');
    setIsProcessing(true);
    // Simulate processing and summarization
    // Simulate processing and summarization
    setTimeout(() => {
      // Format summary with markdown
      const summaryText = `Summary of ${logEntries.length} log entries processed from file "${fileName}".`;
      setSummary(summaryText);
  padding: 10px;
  border-radius: 4px;
  overflow-x: auto;
}

.clear-button {
  background-color: var(--error);
  color: white;
  };

  const handleFileSelect = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };
.clear-button:hover {
  background-color: #dc2626;
}

  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
  };

  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
  };

  const handleDropAreaClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };
  // Add test to verify file parsing logic
  const testFileParsing = () => {
    // Mock data for testing
    const mockLogData = [
      { timestamp: "2023-01-01T00:00:00Z", level: "INFO", message: "Application started" },
      { timestamp: "2023-01-01T00:01:00Z", level: "ERROR", message: "Database connection failed" }
    ];
      setLogEntries(entries);
      return true;
    } catch (e) {
      setError('Failed to parse mock log content.');
      setLogEntries([]);
      return false;
    }
  return (
    <div className="app">
      <h1>Log Summarizer</h1>
      <div className="status-indicator">
      <div
        className="file-picker"
        onDragOver={handleDragOver}
        <div
          onClick={handleDropAreaClick}
          className="drop-area"
          style={isDragging ? { backgroundColor: 'rgba(96, 165, 250, 0.2)' } : undefined}
        >

          <button onClick={handleFileSelect} className="file-button">
        </div>

        {fileName && (
          <div className="file-info">
            Selected file: <strong>{fileName}</strong>
          </div>
        )}

        {isProcessing && (
          <div className="processing-indicator">
            Processing logs...
          </div>
        )}

        {error && <div className="error">{error}</div>}
      </div>

      <div className="file-drop-hint">
        Or drag and drop a JSON file here
      </div>

      {logContent && !isProcessing && (
        <div className="file-info">
          Selected file: <strong>{fileName}</strong>
        </div>
      {error && <div className="error">{error}</div>}
    </div>

    <div className="file-drop-hint">
      Or drag and drop a JSON file here
    </div>

    {logContent && !isProcessing && (
      <div className="log-preview">
        <h2>Log Preview</h2>
      <div className="test-section">
        <h3>Test Section</h3>

        <button onClick={testFileParsing} className="test-button">
          Run Test
        </button>
      </div>
      <button
        onClick={handleProcessLogs}
        disabled={!logContent || isProcessing}
        className="process-button"
      >

        {isProcessing ? 'Processing...' : 'Process Logs'}
      {summary && (
        <div className="summary">
          <h2>Summary</h2>
          <div dangerouslySetInnerHTML={{ __html: marked(summary) }} />
        </div>
      )}
