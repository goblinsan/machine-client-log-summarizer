import React, { useState, useRef } from 'react';
import './styles.css';

const App = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [statusMessage, setStatusMessage] = useState('');
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Validate file type and size
    if (file.type !== 'text/plain' && !file.name.endsWith('.log') && !file.name.endsWith('.txt')) {
      setStatusMessage('Invalid file type. Please select a .log or .txt file.');
      return;
    }

    if (file.size > 10 * 1024 * 1024) {
      setStatusMessage('File too large. Maximum size is 10MB.');
      return;
    }

    setSelectedFile(file);
    setStatusMessage('');
  };

  const handleIngest = () => {
    if (!selectedFile) return;

    setIsProcessing(true);
    setStatusMessage('Ingesting file...');

    // Simulate ingestion process
    setTimeout(() => {
      setIsProcessing(false);
      setStatusMessage(`Successfully ingested ${selectedFile.name}`);
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setStatusMessage('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
        />
        <button
          onClick={handleIngest}
          disabled={!selectedFile || isProcessing}
          className="ingest-button"
        >
          {isProcessing ? 'Ingesting...' : 'Ingest File'}
        </button>
        <button onClick={handleReset} className="reset-button">
          Reset
        </button>
      </div>

      {selectedFile && (
        <p className="file-name">Selected file: {selectedFile.name}</p>
/* Existing styles... */

.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker {
  margin-bottom: 20px;
}

.file-picker input[type="file"] {
  margin-bottom: 10px;
}

.ingest-button,
.reset-button {
  padding: 10px 15px;
  margin-right: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.ingest-button {
  background-color: #007bff;
  color: white;
}

.ingest-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.reset-button {
  background-color: #6c757d;
  color: white;
}

.file-name {
  margin-top: 10px;
  font-weight: bold;
}

.status-message {
  margin-top: 10px;
  padding: 10px;
  border-radius: 4px;
}

.status-message.processing {
  background-color: #fff3cd;
  color: #856404;
}

.status-message:not(.processing) {
  background-color: #d4edda;
  color: #155724;
}
      {statusMessage && (
        <p className={`status-message ${isProcessing ? 'processing' : ''}`}>
          {statusMessage}
        </p>
      )}
    </div>
  );
};

export default App;

    // Validate file size (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      setError('File size exceeds 10MB limit');
      return;
    }

    // Validate file type (only .log files)
    if (!file.name.endsWith('.log')) {
      setError('Only .log files are allowed');
      return;
    }

    setSelectedFile(file);
    setError('');
  };

  const handleIngest = () => {
    if (!selectedFile) {
      setStatusMessage('No file selected');
      return;
    }

    setIsProcessing(true);
    setStatusMessage('Processing file...');

    // Simulate ingestion process
    setTimeout(() => {
      setIsProcessing(false);
      setStatusMessage('File processed successfully');
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setStatusMessage('');
    setError('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <div className="file-picker-container">
        <h1>Log Summarizer</h1>
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log"
          className="file-input"
        />

        {selectedFile && (
          <div className="file-info">
            <p>Selected file: {selectedFile.name}</p>
            <p>Size: {(selectedFile.size / 1024).toFixed(2)} KB</p>
          </div>
        )}

        {error && <p className="error">{error}</p>}

        <div className="button-group">
          <button onClick={handleIngest} disabled={!selectedFile || isProcessing}>
            {isProcessing ? 'Processing...' : 'Ingest File'}
          </button>
          <button onClick={handleReset} disabled={!selectedFile}>
            Reset
          </button>
        </div>
/* Existing styles remain unchanged */

.file-picker-container {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
  text-align: center;
}

.file-input {
  margin: 20px 0;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 100%;
  box-sizing: border-box;
}

.file-info {
  margin: 15px 0;
  padding: 10px;
  background-color: #f5f5f5;
  border-radius: 4px;
}

.error {
  color: red;
  margin: 10px 0;
}

.button-group {
  margin: 20px 0;
}

.button-group button {
  padding: 10px 20px;
  margin: 0 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  background-color: #007bff;
  color: white;
}

.button-group button:hover {
  background-color: #0056b3;
}

.button-group button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.status-message {
  margin-top: 20px;
  padding: 10px;
  background-color: #d4edda;
  color: #155724;
  border-radius: 4px;
}

.status-message p {
  margin: 0;
}
          <div className="status-message">
            <p>{statusMessage}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
  display: none;
}

.file-picker-button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
}

.file-picker-button:hover {
  background-color: #0056b3;
}

.ingestion-button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  margin-top: 10px;
}

.ingestion-button:hover:not(:disabled) {
  background-color: #218838;
}

.ingestion-button:disabled {
  background-color: #6c757d;
}

.status {
  margin-top: 10px;
  color: #28a745;
}

.file-info {
  margin-top: 10px;
  font-weight: bold;
}
