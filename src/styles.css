import React, { useState, useRef } from 'react';
import './styles.css';

const App = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isIngesting, setIsIngesting] = useState(false);
  const [ingestionStatus, setIngestionStatus] = useState<string>('');
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      setIngestionStatus('');
    }
  };

  const handleIngest = () => {
    if (!selectedFile) return;

    setIsIngesting(true);
    setIngestionStatus('Processing file...');

    // Simulate ingestion process
    setTimeout(() => {
      setIsIngesting(false);
      setIngestionStatus('File processed successfully');
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setIngestionStatus('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Machine Client Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          accept=".json"
          onChange={handleFileChange}
          ref={fileInputRef}
        />
        <button onClick={handleIngest} disabled={!selectedFile || isIngesting}>
          {isIngesting ? 'Ingesting...' : 'Ingest File'}
        </button>
        <button onClick={handleReset} disabled={!selectedFile}>
          Reset
        </button>
      </div>

      {selectedFile && (
        <div className="file-info">
          <p>Selected file: {selectedFile.name}</p>
          <p>Size: {(selectedFile.size / 1024).toFixed(2)} KB</p>
/* Add new styles for file picker and ingestion feedback */

.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker {
  margin-bottom: 20px;
}

.file-picker input[type="file"] {
  margin-right: 10px;
}

.file-picker button {
  padding: 8px 16px;
  margin-right: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.file-picker button:hover {
  background-color: #0056b3;
}

.file-picker button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.file-info {
  margin-bottom: 20px;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.ingestion-status {
  padding: 10px;
  background-color: #d4edda;
  color: #155724;
  border-radius: 4px;
}

.ingestion-status p {
  margin: 0;
}

/* Existing styles from original file */

/* ... (existing CSS content) ... */
          <p>{ingestionStatus}</p>
        </div>
      )}
    </div>
  );
};

export default App;

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];

    if (!file) {
      setError('No file selected');
      return;
    }

    if (!file.name.endsWith('.log')) {
      setError('Only .log files are allowed');
      return;
    }

    const reader = new FileReader();

    reader.onload = (event) => {
      const content = event.target?.result as string;

      setFileData({
        name: file.name,
        content
      });

      setError(null);
    };

    reader.onerror = () => {
      setError('Failed to read file');
    };

    reader.readAsText(file);
  };

  const handleIngest = () => {
    if (!fileData) {
      setError('No file to ingest');
      return;
    }

    setIsProcessing(true);

    // Simulate ingestion logic here
    setTimeout(() => {
      setIsProcessing(false);
      // In a real app, this would be replaced with actual ingestion logic
      console.log('Ingesting file:', fileData.name);
    }, 1000);
  };

  const handleReset = () => {
    setFileData(null);
    setError(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Machine Client Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log"
        />

        {fileData && (
          <div className="file-info">
            <p>Selected file: {fileData.name}</p>
            <button onClick={handleIngest} disabled={isProcessing}>
              {isProcessing ? 'Processing...' : 'Ingest File'}
            </button>
          </div>
        )}

        {error && <p className="error">{error}</p>}

        {fileData && !isProcessing && (
          <button onClick={handleReset} className="reset-btn">
            Reset
          </button>
        )}
      </div>

      {fileData && !isProcessing && (
        <div className="summary">
          <h2>Summary</h2>
          <p>{fileData.content.substring(0, 100)}...</p>
        </div>
.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker {
  margin-bottom: 20px;
}

.file-info {
  margin-top: 10px;
}

.error {
  color: red;
  margin-top: 10px;
}

.reset-btn {
  margin-left: 10px;
  padding: 5px 10px;
  background-color: #f0f0f0;
  border: none;
  cursor: pointer;
}

.summary {
  margin-top: 20px;
}

.loading {
  margin-top: 20px;
}
        <div className="loading">
          <p>Processing file...</p>
        </div>
      )}
    </div>
  );
};

export default App;
}

const App = () => {
  const [selectedFile, setSelectedFile] = useState<FileData | null>(null);
  const [ingestionStatus, setIngestionStatus] = useState<IngestionStatus>({
    status: 'idle',
  });
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];

    if (!file) return;

    // Validate file type
    if (!file.name.endsWith('.log') && !file.name.endsWith('.txt')) {
      setIngestionStatus({
        status: 'error',
        message: 'Only .log and .txt files are allowed.',
      });
      return;
    }

    // Validate file size (10MB limit)
    if (file.size > 10 * 1024 * 1024) {
      setIngestionStatus({
        status: 'error',
        message: 'File size exceeds 10MB limit.',
      });
      return;
    }

    setSelectedFile({
      name: file.name,
      size: file.size,
      lastModified: file.lastModified,
    });

    setIngestionStatus({
      status: 'idle',
    });
  };

  const handleIngestion = () => {
    if (!selectedFile) return;

    setIngestionStatus({
      status: 'loading',
      message: 'Processing file...',
    });

    // Simulate ingestion process
    setTimeout(() => {
      setIngestionStatus({
        status: 'success',
        message: `Successfully processed ${selectedFile.name} in 2.3s`,
      });
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setIngestionStatus({
      status: 'idle',
    });
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div className="file-picker-container">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
          className="file-input"
        />

        <div className="file-info">
          {selectedFile ? (
            <p>
              Selected file: <strong>{selectedFile.name}</strong> ({(selectedFile.size / 1024).toFixed(2)} KB)
            </p>
          ) : (
            <p>No file selected</p>
          )}

          {ingestionStatus.status === 'error' && (
            <div className="error-message">
              {ingestionStatus.message}
            </div>
          )}

          <div className="action-buttons">
            {selectedFile && (
              <button
                onClick={handleIngestion}
                disabled={ingestionStatus.status === 'loading'}
                className="ingest-button"
              >
                {ingestionStatus.status === 'loading' ? 'Processing...' : 'Ingest File'}
              </button>
            )}

            {selectedFile && (
              <button onClick={handleReset} className="reset-button">
                Reset
              </button>
            )}
          </div>

/* Existing styles remain unchanged */

.app {
  padding: 2rem;
  font-family: Arial, sans-serif;
}

.file-picker-container {
  margin-top: 1rem;
}

.file-input {
  margin-bottom: 1rem;
}

.file-info p {
  margin: 0.5rem 0;
}

.error-message {
  color: red;
  font-weight: bold;
  margin-top: 0.5rem;
}

.success-message {
  color: green;
  font-weight: bold;
  margin-top: 0.5rem;
}

.action-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 1rem;
}

.ingest-button,
.reset-button {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.ingest-button {
  background-color: #007bff;
  color: white;
}

.ingest-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.reset-button {
  background-color: #6c757d;
  color: white;
}

.reset-button:hover {
  background-color: #5a6268;
}

.ingest-button:hover {
  background-color: #0056b3;
}

.file-info {
  border: 1px solid #ddd;
  padding: 1rem;
  border-radius: 4px;
  background-color: #f9f9f9;
}

.app h1 {
  color: #333;
}

/* Responsive adjustments */
@media (max-width: 600px) {
  .app {
    padding: 1rem;
  }

  .action-buttons {
    flex-direction: column;
  }

  .ingest-button,
  .reset-button {
    width: 100%;
  }
}
              {ingestionStatus.message}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default App;

    // Validate file type and size
    if (file.type !== 'text/plain' && !file.name.endsWith('.log') && !file.name.endsWith('.txt')) {
      setStatusMessage('Invalid file type. Please select a .log or .txt file.');
      return;
    }

    if (file.size > 10 * 1024 * 1024) {
      setStatusMessage('File too large. Maximum size is 10MB.');
      return;
    }

    setSelectedFile(file);
    setStatusMessage('');
  };

  const handleIngest = () => {
    if (!selectedFile) return;

    setIsProcessing(true);
    setStatusMessage('Ingesting file...');

    // Simulate ingestion process
    setTimeout(() => {
      setIsProcessing(false);
      setStatusMessage(`Successfully ingested ${selectedFile.name}`);
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setStatusMessage('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <h1>Log Summarizer</h1>

      <div className="file-picker">
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log,.txt"
        />
        <button
          onClick={handleIngest}
          disabled={!selectedFile || isProcessing}
          className="ingest-button"
        >
          {isProcessing ? 'Ingesting...' : 'Ingest File'}
        </button>
        <button onClick={handleReset} className="reset-button">
          Reset
        </button>
      </div>

      {selectedFile && (
        <p className="file-name">Selected file: {selectedFile.name}</p>
/* Existing styles... */

.app {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.file-picker {
  margin-bottom: 20px;
}

.file-picker input[type="file"] {
  margin-bottom: 10px;
}

.ingest-button,
.reset-button {
  padding: 10px 15px;
  margin-right: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.ingest-button {
  background-color: #007bff;
  color: white;
}

.ingest-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.reset-button {
  background-color: #6c757d;
  color: white;
}

.file-name {
  margin-top: 10px;
  font-weight: bold;
}

.status-message {
  margin-top: 10px;
  padding: 10px;
  border-radius: 4px;
}

.status-message.processing {
  background-color: #fff3cd;
  color: #856404;
}

.status-message:not(.processing) {
  background-color: #d4edda;
  color: #155724;
}
      {statusMessage && (
        <p className={`status-message ${isProcessing ? 'processing' : ''}`}>
          {statusMessage}
        </p>
      )}
    </div>
  );
};

export default App;

    // Validate file size (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      setError('File size exceeds 10MB limit');
      return;
    }

    // Validate file type (only .log files)
    if (!file.name.endsWith('.log')) {
      setError('Only .log files are allowed');
      return;
    }

    setSelectedFile(file);
    setError('');
  };

  const handleIngest = () => {
    if (!selectedFile) {
      setStatusMessage('No file selected');
      return;
    }

    setIsProcessing(true);
    setStatusMessage('Processing file...');

    // Simulate ingestion process
    setTimeout(() => {
      setIsProcessing(false);
      setStatusMessage('File processed successfully');
    }, 2000);
  };

  const handleReset = () => {
    setSelectedFile(null);
    setStatusMessage('');
    setError('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="app">
      <div className="file-picker-container">
        <h1>Log Summarizer</h1>
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept=".log"
          className="file-input"
        />

        {selectedFile && (
          <div className="file-info">
            <p>Selected file: {selectedFile.name}</p>
            <p>Size: {(selectedFile.size / 1024).toFixed(2)} KB</p>
          </div>
        )}

        {error && <p className="error">{error}</p>}

        <div className="button-group">
          <button onClick={handleIngest} disabled={!selectedFile || isProcessing}>
            {isProcessing ? 'Processing...' : 'Ingest File'}
          </button>
          <button onClick={handleReset} disabled={!selectedFile}>
            Reset
          </button>
        </div>
/* Existing styles remain unchanged */

.file-picker-container {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
  text-align: center;
}

.file-input {
  margin: 20px 0;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 100%;
  box-sizing: border-box;
}

.file-info {
  margin: 15px 0;
  padding: 10px;
  background-color: #f5f5f5;
  border-radius: 4px;
}

.error {
  color: red;
  margin: 10px 0;
}

.button-group {
  margin: 20px 0;
}

.button-group button {
  padding: 10px 20px;
  margin: 0 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  background-color: #007bff;
  color: white;
}

.button-group button:hover {
  background-color: #0056b3;
}

.button-group button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.status-message {
  margin-top: 20px;
  padding: 10px;
  background-color: #d4edda;
  color: #155724;
  border-radius: 4px;
}

.status-message p {
  margin: 0;
}
          <div className="status-message">
            <p>{statusMessage}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
  display: none;
}

.file-picker-button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
}

.file-picker-button:hover {
  background-color: #0056b3;
}

.ingestion-button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  margin-top: 10px;
}

.ingestion-button:hover:not(:disabled) {
  background-color: #218838;
}

.ingestion-button:disabled {
  background-color: #6c757d;
}

.status {
  margin-top: 10px;
  color: #28a745;
}

.file-info {
  margin-top: 10px;
  font-weight: bold;
}
